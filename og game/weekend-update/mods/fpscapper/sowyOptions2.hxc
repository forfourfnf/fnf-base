import flixel.FlxG;
import flixel.util.FlxSave;

import funkin.modding.module.Module;
import funkin.audio.FunkinSound;
import funkin.Paths;

import funkin.play.PlayState;

import funkin.ui.options.OptionsState;
import funkin.ui.options.PageName;

import funkin.ui.Alphabet;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCameraFollowStyle;

import funkin.PlayerSettings;

import haxe.ds.ObjectMap;
import haxe.ds.StringMap;

// import thx.Functions.Functions1; // Why isn't it possible

import Std;

//// nebula zorua my goat
class SowyOptionsModule extends Module
{
	var noop = ()->{}//Functions1.noop; // why not you stupid bastard

	// name -> perm def
	var optionDefs:StringMap = new StringMap();
	// name (in order)
	var optionNames:Array<String> = [];
	
	// name -> temp defs
	var optionVars:StringMap = new StringMap();
	// obj -> temp defs
	var itemVars = new ObjectMap();
	
	function defineOption(name, data){
		data.name = name;
		optionNames.push(name);
		optionDefs.set(name, data);
	}
	
	var save:FlxSave;
	var controls;

	function new(){
		super("Sowy Options", 101);
		
		save = new FlxSave();
		save.bind("sowyoptions", "Riconuts");
		
		defineOption(
			"FPS Cap",
			{
				load: function(def){
					if (save.data.frameRate == null)
						save.data.frameRate = 144;
						
					set_FPS(save.data.frameRate);
					trace("loaded FPS");
				},
				onCreate: function(vars, prefs:FlxState)
				{
					var optionItem = prefs.items.createItem(
						120, 120 * prefs.items.length + 30, 
						"FPS Cap", 
						"bold", 
						noop,
						true
					);
					prefs.add(vars.optionItem = optionItem);
					
					var fpsTxt = new FlxText(optionItem.x + optionItem.width + 50, 0, 0, " " + get_FPS(), 52);
					fpsTxt.y = optionItem.y + (optionItem.height - fpsTxt.height) * 0.5 + 10;
					fpsTxt.borderStyle = FlxTextBorderStyle.OUTLINE_FAST;
					fpsTxt.borderSize = 5;
					fpsTxt.borderColor = 0xFF000000;
					fpsTxt.x = Std.int(fpsTxt.x);
					fpsTxt.alpha = optionItem.label.alpha;
					
					prefs.add(vars.fpsTxt = fpsTxt);
					
					vars.userChangeFPS = function(value:Int, ?isAbs:Bool)
					{
						var value:Int = Std.int(isAbs==true ? value : get_FPS()+value);
						fpsTxt.text = " " + set_FPS(value);
						//FunkinSound.playOnce(Paths.sound("scrollMenu"));
					}
				},
				onSelect: function(vars){
					var optionItem = vars.optionItem;
					var fpsTxt = vars.fpsTxt;
					
					//optionItem.x = 170;
					fpsTxt.x = 170 + optionItem.width + 30;
					fpsTxt.alpha = optionItem.label.alpha;
					
				},
				onUnselect: function(vars){
					var optionItem = vars.optionItem;
					var fpsTxt = vars.fpsTxt;
					
					//optionItem.x = 150;
					fpsTxt.x = 150 + optionItem.width + 30;
					fpsTxt.alpha = optionItem.label.alpha;
					
				},
				onUpdate: function(vars, elapsed){
					var userChangeFPS = vars.userChangeFPS;
					
					if (controls.UI_LEFT || controls.UI_RIGHT)
					{
						if (controls.UI_LEFT){
							numericWheel -= elapsed;
						}
						if (controls.UI_RIGHT){
							numericWheel += elapsed;
						}
					}
					else
						numericWheel = 0;
					
					if (controls.UI_LEFT_P){
						userChangeFPS(-1);
					}
					if (controls.UI_RIGHT_P){
						userChangeFPS(1);
					}
					
					if (reseted > 0){
						reseted--;
						//trace("un");
					}else if (controls.RESET){
						var displayFPS = Std.int(FlxG.stage.application.window.displayMode.refreshRate);
						var currentFPS = Std.int(get_FPS());
						
						userChangeFPS(currentFPS==displayFPS ? 144 : displayFPS, true);
						//trace("RESET!!");
						
						numericWheel = 0;
						reseted = 2;
					}
					
					if (numericWheel < -0.25){
						userChangeFPS(-1);
						numericWheel = -0.24;
					}
					if (numericWheel > 0.25){
						userChangeFPS(1);
						numericWheel = 0.24;
					}
				},
				onDestroy: function(){
					
					save.data.frameRate = get_FPS();
					
					trace("saved FPS");
				}
			}
		);
		
		for (def in optionDefs)
		{
			if (def.load != null){
				def.load(def);
			}
		}
	}
	
	////

	function set_FPS(val:Int)
	{
		var framerate = Std.int(val);
		if (framerate < 30)
			framerate = 30;
		if (framerate > 240)
			framerate = 240;
		
		FlxG.updateFramerate = FlxG.drawFramerate = framerate;
		
		return framerate;
	}
	
	function get_FPS(){
		return Std.int(FlxG.drawFramerate);
	}
	
	////
	
	function setAlphabetText(obj:Alphabet, text:String){
		var prevX = obj.x; // WHY
		obj.x = 0;
		
		while (obj.members.length > 0){
			obj.members.pop().destroy();
		}
		obj.lastSprite = null;
		obj.text = obj._finalText = text;
		obj.addText();
		
		obj.x = prevX;
	}

	////
	var inOptions:Bool = false;
	var curSelected = null;
	var curSelectedVars = null;
	var curSelectedUpdate = null;
	
	var numericWheel:Float = 0.0;
	var reseted:Int = 0; // wack input
	
	function resetOptionStateVariables()
	{
		inOptions = false;
		curSelected = null;
		curSelectedVars = null;
		curSelectedUpdate = null;
		selectedFramerateCap = false;
		
		fpsCapItem = null;
		fpsTxt = null;
		fpsDisplay = null;
		
		optionVars.clear();
		itemVars.clear();
	}

	override function onUpdate(event){
		super.onUpdate(event);
	
		if (inOptions){
			var elapsed:Float = event.elapsed;
			var page = FlxG.state.currentPage;
			
			if (FlxG.state.currentName == PageName.Preferences)
			{
				var items = page.items;
				
				if (curSelectedUpdate != null)
					curSelectedUpdate(curSelectedVars, elapsed);
			}
		}
	}

	override function onStateChangeEnd(event){
		super.onStateChangeEnd(event);
		
		controls = PlayerSettings.player1.controls;
		
		if (Std.isOfType(event.targetState, OptionsState))
		{
			resetOptionStateVariables();
		
			var prefs = event.targetState.pages.get(PageName.Preferences);
			inOptions = true;
			
			//// Unshittify Options Menu
			var camFollow = prefs.camFollow;
			camFollow.setSize(0, 0);
			camFollow.screenCenter(0x01);
			camFollow.x -= 50;
			
			prefs.menuCamera.setScrollBounds(null, null, null, null);
			prefs.menuCamera.follow(camFollow, FlxCameraFollowStyle.NO_DEAD_ZONE, 0.16);
			prefs.menuCamera.snapToTarget();

			////
			
			for (name in optionNames){
				var def = optionDefs.get(name);
				if (def == null){
					trace(name+" with no def!?");
					continue;
				}
				
				var vars = {name: name, def: def};
				optionVars.set(name, vars);
				
				if (def.onCreate != null)
					def.onCreate(vars, prefs);
				
				if (vars.optionItem != null)
					itemVars.set(vars.optionItem, vars);
			}
			
			prefs.items.onChange.add(function(selected) 
			{
				if (curSelected != null){
					//curSelected.label.x = 150;
				
					var vars = itemVars.get(curSelected);
					if (vars != null && vars.def.onUnselect != null){
						vars.def.onUnselect(vars);
					}
				}
				
				curSelected = selected;
				curSelectedVars = itemVars.get(selected);
				curSelectedUpdate = null;
				
				var vars = curSelectedVars;
				if (vars != null){
					if (vars.def.onSelect != null)
						vars.def.onSelect(vars);
					
					curSelectedUpdate = vars.def.onUpdate;
				}
				
				//curSelected.label.x = 170;
				
				/////
				prefs.camFollow.set_y(selected.y + (selected.height) / 2);
			});
		}
		else if (inOptions){
			resetOptionStateVariables();
			
			for (def in optionDefs){
				//trace("game ending", def);
				if (def.onDestroy != null){
					def.onDestroy();
				}
			}
			
			save.flush();
		}
	}

}